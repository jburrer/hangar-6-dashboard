{"ast":null,"code":"import { rename, writeFile } from 'node:fs/promises';\nimport { basename, dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n// Returns a temporary file\n// Example: for /some/file will return /some/.file.tmp\nfunction getTempFilename(file) {\n  const f = file instanceof URL ? fileURLToPath(file) : file.toString();\n  return join(dirname(f), `.${basename(f)}.tmp`);\n}\n// Retries an asynchronous operation with a delay between retries and a maximum retry count\nasync function retryAsyncOperation(fn, maxRetries, delayMs) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, delayMs));\n      } else {\n        throw error; // Rethrow the error if max retries reached\n      }\n    }\n  }\n}\nexport class Writer {\n  #filename;\n  #tempFilename;\n  #locked = false;\n  #prev = null;\n  #next = null;\n  #nextPromise = null;\n  #nextData = null;\n  // File is locked, add data for later\n  #add(data) {\n    // Only keep most recent data\n    this.#nextData = data;\n    // Create a singleton promise to resolve all next promises once next data is written\n    this.#nextPromise ||= new Promise((resolve, reject) => {\n      this.#next = [resolve, reject];\n    });\n    // Return a promise that will resolve at the same time as next promise\n    return new Promise((resolve, reject) => {\n      this.#nextPromise?.then(resolve).catch(reject);\n    });\n  }\n  // File isn't locked, write data\n  async #write(data) {\n    // Lock file\n    this.#locked = true;\n    try {\n      // Atomic write\n      await writeFile(this.#tempFilename, data, 'utf-8');\n      await retryAsyncOperation(async () => {\n        await rename(this.#tempFilename, this.#filename);\n      }, 10, 100);\n      // Call resolve\n      this.#prev?.[0]();\n    } catch (err) {\n      // Call reject\n      if (err instanceof Error) {\n        this.#prev?.[1](err);\n      }\n      throw err;\n    } finally {\n      // Unlock file\n      this.#locked = false;\n      this.#prev = this.#next;\n      this.#next = this.#nextPromise = null;\n      if (this.#nextData !== null) {\n        const nextData = this.#nextData;\n        this.#nextData = null;\n        await this.write(nextData);\n      }\n    }\n  }\n  constructor(filename) {\n    this.#filename = filename;\n    this.#tempFilename = getTempFilename(filename);\n  }\n  async write(data) {\n    return this.#locked ? this.#add(data) : this.#write(data);\n  }\n}","map":{"version":3,"names":["rename","writeFile","basename","dirname","join","fileURLToPath","getTempFilename","file","f","URL","toString","retryAsyncOperation","fn","maxRetries","delayMs","i","error","Promise","resolve","setTimeout","Writer","filename","tempFilename","locked","prev","next","nextPromise","nextData","add","#add","data","reject","then","catch","write","#write","err","Error","constructor"],"sources":["/home/n3mo/Documents/hangar-6-dashboard/node_modules/steno/lib/index.js"],"sourcesContent":["import { rename, writeFile } from 'node:fs/promises';\nimport { basename, dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n// Returns a temporary file\n// Example: for /some/file will return /some/.file.tmp\nfunction getTempFilename(file) {\n    const f = file instanceof URL ? fileURLToPath(file) : file.toString();\n    return join(dirname(f), `.${basename(f)}.tmp`);\n}\n// Retries an asynchronous operation with a delay between retries and a maximum retry count\nasync function retryAsyncOperation(fn, maxRetries, delayMs) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            return await fn();\n        }\n        catch (error) {\n            if (i < maxRetries - 1) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n            else {\n                throw error; // Rethrow the error if max retries reached\n            }\n        }\n    }\n}\nexport class Writer {\n    #filename;\n    #tempFilename;\n    #locked = false;\n    #prev = null;\n    #next = null;\n    #nextPromise = null;\n    #nextData = null;\n    // File is locked, add data for later\n    #add(data) {\n        // Only keep most recent data\n        this.#nextData = data;\n        // Create a singleton promise to resolve all next promises once next data is written\n        this.#nextPromise ||= new Promise((resolve, reject) => {\n            this.#next = [resolve, reject];\n        });\n        // Return a promise that will resolve at the same time as next promise\n        return new Promise((resolve, reject) => {\n            this.#nextPromise?.then(resolve).catch(reject);\n        });\n    }\n    // File isn't locked, write data\n    async #write(data) {\n        // Lock file\n        this.#locked = true;\n        try {\n            // Atomic write\n            await writeFile(this.#tempFilename, data, 'utf-8');\n            await retryAsyncOperation(async () => {\n                await rename(this.#tempFilename, this.#filename);\n            }, 10, 100);\n            // Call resolve\n            this.#prev?.[0]();\n        }\n        catch (err) {\n            // Call reject\n            if (err instanceof Error) {\n                this.#prev?.[1](err);\n            }\n            throw err;\n        }\n        finally {\n            // Unlock file\n            this.#locked = false;\n            this.#prev = this.#next;\n            this.#next = this.#nextPromise = null;\n            if (this.#nextData !== null) {\n                const nextData = this.#nextData;\n                this.#nextData = null;\n                await this.write(nextData);\n            }\n        }\n    }\n    constructor(filename) {\n        this.#filename = filename;\n        this.#tempFilename = getTempFilename(filename);\n    }\n    async write(data) {\n        return this.#locked ? this.#add(data) : this.#write(data);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}